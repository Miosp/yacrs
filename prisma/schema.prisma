generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  reservations  Reservation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Auditorium {
  id          Int    @id @default(autoincrement())
  displayName String

  seats      Seat[]
  screenings Screening[]
}

model Seat {
  id         Int @id @default(autoincrement())
  row        Int
  seatNumber Int

  reservations Reservation[]

  auditoriumId Int
  auditorium   Auditorium @relation(fields: [auditoriumId], references: [id], onDelete: Cascade)
}

model Reservation {
  id         Int           @id @default(autoincrement())
  createdAt  DateTime      @default(now())
  totalPrice Decimal
  status     PaymentStatus @default(RESERVED)

  seats Seat[]

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  screeningId Int
  screening   Screening @relation(fields: [screeningId], references: [id], onDelete: Cascade)
}

model Screening {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime

  reservations Reservation[]

  auditoriumId Int
  auditorium   Auditorium @relation(fields: [auditoriumId], references: [id], onDelete: Cascade)

  movieId Int
  movie   Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)
}

model Movie {
  id Int @id @default(autoincrement())

  screenings Screening[]
}

enum PaymentStatus {
  RESERVED
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
